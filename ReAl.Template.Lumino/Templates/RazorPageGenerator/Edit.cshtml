@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using Microsoft.VisualStudio.Web.CodeGeneration.EntityFrameworkCore
@using System.Collections.Generic
@using System.Linq
@@page
@@model @Model.NamespaceName.@Model.PageModelClassName

@{
    if (Model.IsPartialView)
    {
    }
    else if (Model.IsLayoutPageSelected)
    {
@:@@section Styles
@:{
	@:<!-- Sweetalert CSS -->
	@:<link href="~/lib/sweetalert2/dist/sweetalert2.min.css" rel="stylesheet">
@:}	
@:
@:@@{
    @:ViewData["Title"] = "@Model.ViewName";
        if (!string.IsNullOrEmpty(Model.LayoutPageFile))
        {
    @:Layout = "@Model.LayoutPageFile";
        }
@:}
@:
@:<div class="row">
	@:<div class="col-lg-12">
		@:<h1 class="page-header">@Model.ViewDataTypeShortName</h1>
	@:</div>
@:</div><!--/.row-->
@:
    }
    else
    {
@:@@{
    @:Layout = null;
@:}
@:
@:<!DOCTYPE html>
@:
@:<html>
@:<head>
    @:<meta name="viewport" content="width=device-width" />
    @:<title>@Model.ViewName</title>
@:</head>
@:<body>
@:
        //    PushIndent("    ");
    }
@:<div class="row">
@:<div class="col-lg-12">
@:<div class="panel panel-default">
@:<div class="panel-heading">@Model.ViewName</div>
@:<div class="panel-body">	
@:<div class="row">
    @:<div class="col-md-6">
        @:<form role="form" method="post" id="EditForm" class="form-horizontal row-border">
            @:<div asp-validation-summary="ModelOnly" class="text-danger"></div>
        foreach (PropertyMetadata property in Model.ModelMetadata.Properties)
        {
            if (property.IsPrimaryKey)
            {
            @:<input type="hidden" asp-for="@(Model.ModelTypeName).@property.PropertyName" />
                continue;
            }

            if (property.Scaffold)
            {
                if (property.IsReadOnly)
                {
                    continue;
                }

                if (property.IsForeignKey)
                {
            @:<div class="form-group">
                @:<label asp-for="@(Model.ModelTypeName).@property.PropertyName" class="col-md-2 control-label"></label>
				@:<div class="col-md-10">
					@:<select asp-for="@(Model.ModelTypeName).@property.PropertyName" class="form-control" asp-items="ViewBag.@property.PropertyName"></select>
				@:</div>
                @:<span asp-validation-for="@(Model.ModelTypeName).@property.PropertyName" class="text-danger"></span>
            @:</div>
                    continue;
                }

                bool isCheckbox = property.TypeName.Equals("System.Boolean");
                if (isCheckbox)
                {
            @:<div class="form-group">
                @:<div class="checkbox">
                    @:<label>
                        @:<input asp-for="@(Model.ModelTypeName).@property.PropertyName" /> @@Html.DisplayNameFor(model => model.@GetValueExpression(property))
                    @:</label>
                @:</div>
            @:</div>
                }
                else if (property.IsEnum && !property.IsEnumFlags)
                {
            @:<div class="form-group">
                @:<label asp-for="@(Model.ModelTypeName).@property.PropertyName" class="col-md-2 control-label"></label>
                @:<div class="col-md-10">
					@:<select asp-for="@(Model.ModelTypeName).@property.PropertyName" class="form-control"></select>
				@:<div>
                @:<span asp-validation-for="@(Model.ModelTypeName).@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
				else if (property.PropertyName == "Apiestado" || property.PropertyName == "Apitransaccion" || property.PropertyName == "Feccre" || property.PropertyName == "Usucre" || property.PropertyName == "Fecmod" || property.PropertyName == "Usumod")
				{
				@:<input asp-for="@(Model.ModelTypeName).@property.PropertyName" class="form-control" type="hidden" />
				}
				else if (property.IsPrimaryKey)
				{
				}
                else
                {
            @:<div class="form-group">
                @:<label asp-for="@(Model.ModelTypeName).@property.PropertyName" class="col-md-2 control-label"></label>
				@:<div class="col-md-10">
					@:<input asp-for="@(Model.ModelTypeName).@property.PropertyName" class="form-control" />
				@:</div>
                @:<span asp-validation-for="@(Model.ModelTypeName).@property.PropertyName" class="text-danger"></span>
            @:</div>
                }
            }
            // Ideally we shouldn't be here  but if the user marks the foreign key as [ScaffoldColumn(false)], we want to atleast try to make it work.
            else if (property.IsForeignKey)
            {
        @:<input type="hidden" asp-for="@(Model.ModelTypeName).@property.PropertyName" />
                continue;
            }
        }
    }
            <div class="form-group">
				<div class="col-md-10">
					<input type="submit" value="Guardar cambios" class="btn btn-default" onclick="Validate(this, event);"/>
				</div>
            </div>
        </form>
    </div>
</div>

</div>
</div>
</div>
</div><!-- /.row -->

<div>
    <a asp-page="./Index">Volver</a>
</div>

@{
    if (Model.ReferenceScriptLibraries)
    {
@:@@section Scripts {
    @:@@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
	@:<!-- Sweetalert JavaScript -->
	@:<script src="~/lib/sweetalert2/dist/sweetalert2.min.js"></script>
	@:
	@:<script>
		@:function Validate(ctl, event)
		@:{
			@:event.preventDefault();
			@:swal({
				@:title: "¿Seguro que desea guardar los cambios del registro?",
				@:text: "Verifique la información antes de aceptar!",
				@:type: "question",
				@:showCancelButton: true,
				@:confirmButtonColor: "#DD6B55",
				@:confirmButtonText: "Actualizar",
				@:cancelButtonText: "Cancelar"
			@:}).then(function(isConfirm) {
				@:if (isConfirm.value) {
					@:$("#EditForm").submit();
				@:} else {
					@:swal("Cancelled", "Se ha cancelado la accion", "error");
				@:}
			@:});
		@:}
	@:</script>
@:}
    }
	else
	{
@:@@section Scripts
@:{
	@:<!-- Sweetalert JavaScript -->
	@:<script src="~/lib/sweetalert2/dist/sweetalert2.min.js"></script>
	@:
	@:<script>
		@:function Validate(ctl, event)
		@:{
			@:event.preventDefault();
			@:swal({
				@:title: "¿Seguro que desea guardar los cambios del registro?",
				@:text: "Verifique la información antes de aceptar!",
				@:type: "question",
				@:showCancelButton: true,
				@:confirmButtonColor: "#DD6B55",
				@:confirmButtonText: "Actualizar",
				@:cancelButtonText: "Cancelar"
			@:}).then(function(isConfirm) {
				@:if (isConfirm.value) {
					@:$("#EditForm").submit();
				@:} else {
					@:swal("Cancelled", "Se ha cancelado la accion", "error");
				@:}
			@:});
		@:}
	@:</script>
@:}	
@:
	}
    // The following code closes the tag used in the case of a view using a layout page and the body and html tags in the case of a regular view page
    if (!Model.IsPartialView && !Model.IsLayoutPageSelected)
    {
@:</body>
@:</html>
    }
}
@functions
{
    string GetAssociationName(IPropertyMetadata property)
    {
        //Todo: Implement properly.
        return property.PropertyName;
    }

    string GetValueExpression(IPropertyMetadata property)
    {
        return property.PropertyName;
    }
}
